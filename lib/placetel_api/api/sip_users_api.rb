=begin
#Placetel API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module PlacetelAPI
  class SipUsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a sip user
    # Delete a sip user by its ID
    # @param id [Integer] Sip user ID
    # @param [Hash] opts the optional parameters
    # @return [SipUser]
    def delete_sip_users_id(id, opts = {})
      data, _status_code, _headers = delete_sip_users_id_with_http_info(id, opts)
      data
    end

    # Delete a sip user
    # Delete a sip user by its ID
    # @param id [Integer] Sip user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SipUser, Integer, Hash)>] SipUser data, response status code and response headers
    def delete_sip_users_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.delete_sip_users_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SipUsersApi.delete_sip_users_id"
      end
      # resource path
      local_var_path = '/sip_users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SipUser' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#delete_sip_users_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete short code
    # Delete sip user short code
    # @param id [Integer] Sip user ID
    # @param code_id [Integer] Short code ID
    # @param [Hash] opts the optional parameters
    # @return [ShortCode]
    def delete_sip_users_id_short_codes_code_id(id, code_id, opts = {})
      data, _status_code, _headers = delete_sip_users_id_short_codes_code_id_with_http_info(id, code_id, opts)
      data
    end

    # Delete short code
    # Delete sip user short code
    # @param id [Integer] Sip user ID
    # @param code_id [Integer] Short code ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShortCode, Integer, Hash)>] ShortCode data, response status code and response headers
    def delete_sip_users_id_short_codes_code_id_with_http_info(id, code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.delete_sip_users_id_short_codes_code_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SipUsersApi.delete_sip_users_id_short_codes_code_id"
      end
      # verify the required parameter 'code_id' is set
      if @api_client.config.client_side_validation && code_id.nil?
        fail ArgumentError, "Missing the required parameter 'code_id' when calling SipUsersApi.delete_sip_users_id_short_codes_code_id"
      end
      # resource path
      local_var_path = '/sip_users/{id}/short_codes/{code_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'code_id' + '}', CGI.escape(code_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ShortCode' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#delete_sip_users_id_short_codes_code_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all sip users
    # Fetch a list of all sip users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_did 
    # @option opts [String] :filter_username 
    # @option opts [String] :filter_name 
    # @option opts [String] :filter_description 
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 25)
    # @return [Array<SipUser>]
    def get_sip_users(opts = {})
      data, _status_code, _headers = get_sip_users_with_http_info(opts)
      data
    end

    # Fetch all sip users
    # Fetch a list of all sip users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_did 
    # @option opts [String] :filter_username 
    # @option opts [String] :filter_name 
    # @option opts [String] :filter_description 
    # @option opts [Integer] :page Page of results to fetch.
    # @option opts [Integer] :per_page Number of results to return per page.
    # @return [Array<(Array<SipUser>, Integer, Hash)>] Array<SipUser> data, response status code and response headers
    def get_sip_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.get_sip_users ...'
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SipUsersApi.get_sip_users, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SipUsersApi.get_sip_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sip_users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter[did]'] = opts[:'filter_did'] if !opts[:'filter_did'].nil?
      query_params[:'filter[username]'] = opts[:'filter_username'] if !opts[:'filter_username'].nil?
      query_params[:'filter[name]'] = opts[:'filter_name'] if !opts[:'filter_name'].nil?
      query_params[:'filter[description]'] = opts[:'filter_description'] if !opts[:'filter_description'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<SipUser>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#get_sip_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a sip user
    # Fetch a sip users by its ID
    # @param id [Integer] Sip user ID
    # @param [Hash] opts the optional parameters
    # @return [SipUser]
    def get_sip_users_id(id, opts = {})
      data, _status_code, _headers = get_sip_users_id_with_http_info(id, opts)
      data
    end

    # Fetch a sip user
    # Fetch a sip users by its ID
    # @param id [Integer] Sip user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SipUser, Integer, Hash)>] SipUser data, response status code and response headers
    def get_sip_users_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.get_sip_users_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SipUsersApi.get_sip_users_id"
      end
      # resource path
      local_var_path = '/sip_users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SipUser' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#get_sip_users_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Short codes
    # List sip user short codes
    # @param id [Integer] Sip user ID
    # @param [Hash] opts the optional parameters
    # @return [ShortCode]
    def get_sip_users_id_short_codes(id, opts = {})
      data, _status_code, _headers = get_sip_users_id_short_codes_with_http_info(id, opts)
      data
    end

    # Short codes
    # List sip user short codes
    # @param id [Integer] Sip user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShortCode, Integer, Hash)>] ShortCode data, response status code and response headers
    def get_sip_users_id_short_codes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.get_sip_users_id_short_codes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SipUsersApi.get_sip_users_id_short_codes"
      end
      # resource path
      local_var_path = '/sip_users/{id}/short_codes'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ShortCode' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#get_sip_users_id_short_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a sip user
    # Create a new sip user
    # @param sip_users [PostSipUsers] 
    # @param [Hash] opts the optional parameters
    # @return [SipUser]
    def post_sip_users(sip_users, opts = {})
      data, _status_code, _headers = post_sip_users_with_http_info(sip_users, opts)
      data
    end

    # Create a sip user
    # Create a new sip user
    # @param sip_users [PostSipUsers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SipUser, Integer, Hash)>] SipUser data, response status code and response headers
    def post_sip_users_with_http_info(sip_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.post_sip_users ...'
      end
      # verify the required parameter 'sip_users' is set
      if @api_client.config.client_side_validation && sip_users.nil?
        fail ArgumentError, "Missing the required parameter 'sip_users' when calling SipUsersApi.post_sip_users"
      end
      # resource path
      local_var_path = '/sip_users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(sip_users) 

      # return_type
      return_type = opts[:return_type] || 'SipUser' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#post_sip_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create short code
    # Create sip user short code
    # @param id [Integer] Sip user ID
    # @param sip_users_id_short_codes [PostSipUsersIdShortCodes] 
    # @param [Hash] opts the optional parameters
    # @return [ShortCode]
    def post_sip_users_id_short_codes(id, sip_users_id_short_codes, opts = {})
      data, _status_code, _headers = post_sip_users_id_short_codes_with_http_info(id, sip_users_id_short_codes, opts)
      data
    end

    # Create short code
    # Create sip user short code
    # @param id [Integer] Sip user ID
    # @param sip_users_id_short_codes [PostSipUsersIdShortCodes] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShortCode, Integer, Hash)>] ShortCode data, response status code and response headers
    def post_sip_users_id_short_codes_with_http_info(id, sip_users_id_short_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.post_sip_users_id_short_codes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SipUsersApi.post_sip_users_id_short_codes"
      end
      # verify the required parameter 'sip_users_id_short_codes' is set
      if @api_client.config.client_side_validation && sip_users_id_short_codes.nil?
        fail ArgumentError, "Missing the required parameter 'sip_users_id_short_codes' when calling SipUsersApi.post_sip_users_id_short_codes"
      end
      # resource path
      local_var_path = '/sip_users/{id}/short_codes'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(sip_users_id_short_codes) 

      # return_type
      return_type = opts[:return_type] || 'ShortCode' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#post_sip_users_id_short_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a sip user
    # Update a sip user by its ID
    # @param id [Integer] Sip user ID
    # @param sip_users [PutSipUsers] 
    # @param [Hash] opts the optional parameters
    # @return [SipUser]
    def put_sip_users_id(id, sip_users, opts = {})
      data, _status_code, _headers = put_sip_users_id_with_http_info(id, sip_users, opts)
      data
    end

    # Update a sip user
    # Update a sip user by its ID
    # @param id [Integer] Sip user ID
    # @param sip_users [PutSipUsers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SipUser, Integer, Hash)>] SipUser data, response status code and response headers
    def put_sip_users_id_with_http_info(id, sip_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SipUsersApi.put_sip_users_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SipUsersApi.put_sip_users_id"
      end
      # verify the required parameter 'sip_users' is set
      if @api_client.config.client_side_validation && sip_users.nil?
        fail ArgumentError, "Missing the required parameter 'sip_users' when calling SipUsersApi.put_sip_users_id"
      end
      # resource path
      local_var_path = '/sip_users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(sip_users) 

      # return_type
      return_type = opts[:return_type] || 'SipUser' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SipUsersApi#put_sip_users_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
