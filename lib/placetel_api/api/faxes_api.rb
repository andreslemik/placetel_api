=begin
#Placetel API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module PlacetelAPI
  class FaxesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a fax
    # Delete a fax by its ID
    # @param id [Integer] Fax ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_faxes_id(id, opts = {})
      delete_faxes_id_with_http_info(id, opts)
      nil
    end

    # Delete a fax
    # Delete a fax by its ID
    # @param id [Integer] Fax ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_faxes_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FaxesApi.delete_faxes_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FaxesApi.delete_faxes_id"
      end
      # resource path
      local_var_path = '/faxes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FaxesApi#delete_faxes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch in- and outbound faxes
    # Provides a list of all faxes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_type  (default to 'inbound,outbound')
    # @option opts [String] :filter_from_number 
    # @option opts [String] :filter_to_number 
    # @option opts [String] :order  (default to 'desc')
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 25)
    # @return [Array<Fax>]
    def get_faxes(opts = {})
      data, _status_code, _headers = get_faxes_with_http_info(opts)
      data
    end

    # Fetch in- and outbound faxes
    # Provides a list of all faxes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_type 
    # @option opts [String] :filter_from_number 
    # @option opts [String] :filter_to_number 
    # @option opts [String] :order 
    # @option opts [Integer] :page Page of results to fetch.
    # @option opts [Integer] :per_page Number of results to return per page.
    # @return [Array<(Array<Fax>, Integer, Hash)>] Array<Fax> data, response status code and response headers
    def get_faxes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FaxesApi.get_faxes ...'
      end
      allowable_values = ["inbound,outbound", "inbound", "outbound"]
      if @api_client.config.client_side_validation && opts[:'filter_type'] && !allowable_values.include?(opts[:'filter_type'])
        fail ArgumentError, "invalid value for \"filter_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling FaxesApi.get_faxes, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling FaxesApi.get_faxes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/faxes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter[type]'] = opts[:'filter_type'] if !opts[:'filter_type'].nil?
      query_params[:'filter[from_number]'] = opts[:'filter_from_number'] if !opts[:'filter_from_number'].nil?
      query_params[:'filter[to_number]'] = opts[:'filter_to_number'] if !opts[:'filter_to_number'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Fax>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FaxesApi#get_faxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch specific fax
    # Fetch in- or outbound fax
    # @param id [Integer] Fax ID
    # @param [Hash] opts the optional parameters
    # @return [Fax]
    def get_faxes_id(id, opts = {})
      data, _status_code, _headers = get_faxes_id_with_http_info(id, opts)
      data
    end

    # Fetch specific fax
    # Fetch in- or outbound fax
    # @param id [Integer] Fax ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Fax, Integer, Hash)>] Fax data, response status code and response headers
    def get_faxes_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FaxesApi.get_faxes_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FaxesApi.get_faxes_id"
      end
      # resource path
      local_var_path = '/faxes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Fax' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FaxesApi#get_faxes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create outbound fax
    # Sends faxes via API call
    # @param faxes [PostFaxes] 
    # @param [Hash] opts the optional parameters
    # @return [Fax]
    def post_faxes(faxes, opts = {})
      data, _status_code, _headers = post_faxes_with_http_info(faxes, opts)
      data
    end

    # Create outbound fax
    # Sends faxes via API call
    # @param faxes [PostFaxes] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Fax, Integer, Hash)>] Fax data, response status code and response headers
    def post_faxes_with_http_info(faxes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FaxesApi.post_faxes ...'
      end
      # verify the required parameter 'faxes' is set
      if @api_client.config.client_side_validation && faxes.nil?
        fail ArgumentError, "Missing the required parameter 'faxes' when calling FaxesApi.post_faxes"
      end
      # resource path
      local_var_path = '/faxes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(faxes) 

      # return_type
      return_type = opts[:return_type] || 'Fax' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FaxesApi#post_faxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
