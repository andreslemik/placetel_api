=begin
#Placetel API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module PlacetelAPI
  class NumbersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a profile for a number
    # Removes the profile for a number
    # @param number_id [Integer] Number ID
    # @param id [Integer] Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Profile]
    def delete_numbers_number_id_profiles_id(number_id, id, opts = {})
      data, _status_code, _headers = delete_numbers_number_id_profiles_id_with_http_info(number_id, id, opts)
      data
    end

    # Delete a profile for a number
    # Removes the profile for a number
    # @param number_id [Integer] Number ID
    # @param id [Integer] Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Profile, Integer, Hash)>] Profile data, response status code and response headers
    def delete_numbers_number_id_profiles_id_with_http_info(number_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumbersApi.delete_numbers_number_id_profiles_id ...'
      end
      # verify the required parameter 'number_id' is set
      if @api_client.config.client_side_validation && number_id.nil?
        fail ArgumentError, "Missing the required parameter 'number_id' when calling NumbersApi.delete_numbers_number_id_profiles_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NumbersApi.delete_numbers_number_id_profiles_id"
      end
      # resource path
      local_var_path = '/numbers/{number_id}/profiles/{id}'.sub('{' + 'number_id' + '}', CGI.escape(number_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Profile' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumbersApi#delete_numbers_number_id_profiles_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all numbers
    # Provides a list of all numbers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_prefix 
    # @option opts [String] :filter_number 
    # @option opts [Object] :filter_activated 
    # @option opts [String] :filter_name 
    # @option opts [String] :filter_description 
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 25)
    # @return [Array<Number>]
    def get_numbers(opts = {})
      data, _status_code, _headers = get_numbers_with_http_info(opts)
      data
    end

    # Get all numbers
    # Provides a list of all numbers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_prefix 
    # @option opts [String] :filter_number 
    # @option opts [Object] :filter_activated 
    # @option opts [String] :filter_name 
    # @option opts [String] :filter_description 
    # @option opts [Integer] :page Page of results to fetch.
    # @option opts [Integer] :per_page Number of results to return per page.
    # @return [Array<(Array<Number>, Integer, Hash)>] Array<Number> data, response status code and response headers
    def get_numbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumbersApi.get_numbers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling NumbersApi.get_numbers, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling NumbersApi.get_numbers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/numbers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter[prefix]'] = opts[:'filter_prefix'] if !opts[:'filter_prefix'].nil?
      query_params[:'filter[number]'] = opts[:'filter_number'] if !opts[:'filter_number'].nil?
      query_params[:'filter[activated]'] = opts[:'filter_activated'] if !opts[:'filter_activated'].nil?
      query_params[:'filter[name]'] = opts[:'filter_name'] if !opts[:'filter_name'].nil?
      query_params[:'filter[description]'] = opts[:'filter_description'] if !opts[:'filter_description'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Number>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumbersApi#get_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a number
    # Fetches a number by its ID
    # @param id [Integer] Number ID
    # @param [Hash] opts the optional parameters
    # @return [Number]
    def get_numbers_id(id, opts = {})
      data, _status_code, _headers = get_numbers_id_with_http_info(id, opts)
      data
    end

    # Retrieve a number
    # Fetches a number by its ID
    # @param id [Integer] Number ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Number, Integer, Hash)>] Number data, response status code and response headers
    def get_numbers_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumbersApi.get_numbers_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NumbersApi.get_numbers_id"
      end
      # resource path
      local_var_path = '/numbers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Number' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumbersApi#get_numbers_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List profiles for a number
    # Lists all available profiles for a number 
    # @param number_id [Integer] Number ID
    # @param [Hash] opts the optional parameters
    # @return [Profile]
    def get_numbers_number_id_profiles(number_id, opts = {})
      data, _status_code, _headers = get_numbers_number_id_profiles_with_http_info(number_id, opts)
      data
    end

    # List profiles for a number
    # Lists all available profiles for a number 
    # @param number_id [Integer] Number ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Profile, Integer, Hash)>] Profile data, response status code and response headers
    def get_numbers_number_id_profiles_with_http_info(number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumbersApi.get_numbers_number_id_profiles ...'
      end
      # verify the required parameter 'number_id' is set
      if @api_client.config.client_side_validation && number_id.nil?
        fail ArgumentError, "Missing the required parameter 'number_id' when calling NumbersApi.get_numbers_number_id_profiles"
      end
      # resource path
      local_var_path = '/numbers/{number_id}/profiles'.sub('{' + 'number_id' + '}', CGI.escape(number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Profile' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumbersApi#get_numbers_number_id_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new profile for a number
    # Shows the active profile for a number
    # @param number_id [Integer] Number ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Profile]
    def post_numbers_number_id_profiles(number_id, unknown_base_type, opts = {})
      data, _status_code, _headers = post_numbers_number_id_profiles_with_http_info(number_id, unknown_base_type, opts)
      data
    end

    # Creates a new profile for a number
    # Shows the active profile for a number
    # @param number_id [Integer] Number ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Profile, Integer, Hash)>] Profile data, response status code and response headers
    def post_numbers_number_id_profiles_with_http_info(number_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumbersApi.post_numbers_number_id_profiles ...'
      end
      # verify the required parameter 'number_id' is set
      if @api_client.config.client_side_validation && number_id.nil?
        fail ArgumentError, "Missing the required parameter 'number_id' when calling NumbersApi.post_numbers_number_id_profiles"
      end
      # verify the required parameter 'unknown_base_type' is set
      if @api_client.config.client_side_validation && unknown_base_type.nil?
        fail ArgumentError, "Missing the required parameter 'unknown_base_type' when calling NumbersApi.post_numbers_number_id_profiles"
      end
      # resource path
      local_var_path = '/numbers/{number_id}/profiles'.sub('{' + 'number_id' + '}', CGI.escape(number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(unknown_base_type) 

      # return_type
      return_type = opts[:return_type] || 'Profile' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumbersApi#post_numbers_number_id_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activates a profile for a number
    # Change the active profile for a number
    # @param number_id [Integer] Number ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Profile]
    def put_numbers_number_id_profiles(number_id, unknown_base_type, opts = {})
      data, _status_code, _headers = put_numbers_number_id_profiles_with_http_info(number_id, unknown_base_type, opts)
      data
    end

    # Activates a profile for a number
    # Change the active profile for a number
    # @param number_id [Integer] Number ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Profile, Integer, Hash)>] Profile data, response status code and response headers
    def put_numbers_number_id_profiles_with_http_info(number_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumbersApi.put_numbers_number_id_profiles ...'
      end
      # verify the required parameter 'number_id' is set
      if @api_client.config.client_side_validation && number_id.nil?
        fail ArgumentError, "Missing the required parameter 'number_id' when calling NumbersApi.put_numbers_number_id_profiles"
      end
      # verify the required parameter 'unknown_base_type' is set
      if @api_client.config.client_side_validation && unknown_base_type.nil?
        fail ArgumentError, "Missing the required parameter 'unknown_base_type' when calling NumbersApi.put_numbers_number_id_profiles"
      end
      # resource path
      local_var_path = '/numbers/{number_id}/profiles'.sub('{' + 'number_id' + '}', CGI.escape(number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(unknown_base_type) 

      # return_type
      return_type = opts[:return_type] || 'Profile' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumbersApi#put_numbers_number_id_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
