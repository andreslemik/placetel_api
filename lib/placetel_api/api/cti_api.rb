=begin
#Placetel API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module PlacetelAPI
  class CTIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get config params
    # Get config params
    # @param params [Array<String>] 
    # @param mac [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_cti_mac(params, mac, opts = {})
      get_cti_mac_with_http_info(params, mac, opts)
      nil
    end

    # Get config params
    # Get config params
    # @param params [Array<String>] 
    # @param mac [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_cti_mac_with_http_info(params, mac, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.get_cti_mac ...'
      end
      # verify the required parameter 'params' is set
      if @api_client.config.client_side_validation && params.nil?
        fail ArgumentError, "Missing the required parameter 'params' when calling CTIApi.get_cti_mac"
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.get_cti_mac"
      end
      # resource path
      local_var_path = '/cti/{mac}'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'params'] = @api_client.build_collection_param(params, :csv)

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#get_cti_mac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Answer
    # This method allows device to answer a ringing call with given call_id.
    # @param mac [Integer] 
    # @param cti_mac_answer [PostCtiMacAnswer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_answer(mac, cti_mac_answer, opts = {})
      post_cti_mac_answer_with_http_info(mac, cti_mac_answer, opts)
      nil
    end

    # Answer
    # This method allows device to answer a ringing call with given call_id.
    # @param mac [Integer] 
    # @param cti_mac_answer [PostCtiMacAnswer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_answer_with_http_info(mac, cti_mac_answer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_answer ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_answer"
      end
      # verify the required parameter 'cti_mac_answer' is set
      if @api_client.config.client_side_validation && cti_mac_answer.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_answer' when calling CTIApi.post_cti_mac_answer"
      end
      # resource path
      local_var_path = '/cti/{mac}/answer'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_answer) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_answer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Blind transfer
    # This method allows to do a blind tranfser on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_blind_transfer [PostCtiMacBlindTransfer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_blind_transfer(mac, cti_mac_blind_transfer, opts = {})
      post_cti_mac_blind_transfer_with_http_info(mac, cti_mac_blind_transfer, opts)
      nil
    end

    # Blind transfer
    # This method allows to do a blind tranfser on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_blind_transfer [PostCtiMacBlindTransfer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_blind_transfer_with_http_info(mac, cti_mac_blind_transfer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_blind_transfer ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_blind_transfer"
      end
      # verify the required parameter 'cti_mac_blind_transfer' is set
      if @api_client.config.client_side_validation && cti_mac_blind_transfer.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_blind_transfer' when calling CTIApi.post_cti_mac_blind_transfer"
      end
      # resource path
      local_var_path = '/cti/{mac}/blind_transfer'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_blind_transfer) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_blind_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete conference
    # This method allows to complete conference on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_complete_conference [PostCtiMacCompleteConference] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_complete_conference(mac, cti_mac_complete_conference, opts = {})
      post_cti_mac_complete_conference_with_http_info(mac, cti_mac_complete_conference, opts)
      nil
    end

    # Complete conference
    # This method allows to complete conference on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_complete_conference [PostCtiMacCompleteConference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_complete_conference_with_http_info(mac, cti_mac_complete_conference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_complete_conference ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_complete_conference"
      end
      # verify the required parameter 'cti_mac_complete_conference' is set
      if @api_client.config.client_side_validation && cti_mac_complete_conference.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_complete_conference' when calling CTIApi.post_cti_mac_complete_conference"
      end
      # resource path
      local_var_path = '/cti/{mac}/complete_conference'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_complete_conference) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_complete_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete transfer
    # This method allows to initiate the tranfser on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_complete_transfer [PostCtiMacCompleteTransfer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_complete_transfer(mac, cti_mac_complete_transfer, opts = {})
      post_cti_mac_complete_transfer_with_http_info(mac, cti_mac_complete_transfer, opts)
      nil
    end

    # Complete transfer
    # This method allows to initiate the tranfser on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_complete_transfer [PostCtiMacCompleteTransfer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_complete_transfer_with_http_info(mac, cti_mac_complete_transfer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_complete_transfer ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_complete_transfer"
      end
      # verify the required parameter 'cti_mac_complete_transfer' is set
      if @api_client.config.client_side_validation && cti_mac_complete_transfer.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_complete_transfer' when calling CTIApi.post_cti_mac_complete_transfer"
      end
      # resource path
      local_var_path = '/cti/{mac}/complete_transfer'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_complete_transfer) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_complete_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Decline
    # This method allows device to Decline the call specified by the call_id. 
    # @param mac [Integer] 
    # @param cti_mac_decline [PostCtiMacDecline] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_decline(mac, cti_mac_decline, opts = {})
      post_cti_mac_decline_with_http_info(mac, cti_mac_decline, opts)
      nil
    end

    # Decline
    # This method allows device to Decline the call specified by the call_id. 
    # @param mac [Integer] 
    # @param cti_mac_decline [PostCtiMacDecline] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_decline_with_http_info(mac, cti_mac_decline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_decline ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_decline"
      end
      # verify the required parameter 'cti_mac_decline' is set
      if @api_client.config.client_side_validation && cti_mac_decline.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_decline' when calling CTIApi.post_cti_mac_decline"
      end
      # resource path
      local_var_path = '/cti/{mac}/decline'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_decline) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_decline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dial
    # This method initiates a new call.
    # @param mac [Integer] 
    # @param cti_mac_dial [PostCtiMacDial] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_dial(mac, cti_mac_dial, opts = {})
      post_cti_mac_dial_with_http_info(mac, cti_mac_dial, opts)
      nil
    end

    # Dial
    # This method initiates a new call.
    # @param mac [Integer] 
    # @param cti_mac_dial [PostCtiMacDial] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_dial_with_http_info(mac, cti_mac_dial, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_dial ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_dial"
      end
      # verify the required parameter 'cti_mac_dial' is set
      if @api_client.config.client_side_validation && cti_mac_dial.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_dial' when calling CTIApi.post_cti_mac_dial"
      end
      # resource path
      local_var_path = '/cti/{mac}/dial'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_dial) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_dial\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dial digit
    # This method initiates a new call.
    # @param mac [Integer] 
    # @param cti_mac_dial_digit [PostCtiMacDialDigit] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_dial_digit(mac, cti_mac_dial_digit, opts = {})
      post_cti_mac_dial_digit_with_http_info(mac, cti_mac_dial_digit, opts)
      nil
    end

    # Dial digit
    # This method initiates a new call.
    # @param mac [Integer] 
    # @param cti_mac_dial_digit [PostCtiMacDialDigit] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_dial_digit_with_http_info(mac, cti_mac_dial_digit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_dial_digit ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_dial_digit"
      end
      # verify the required parameter 'cti_mac_dial_digit' is set
      if @api_client.config.client_side_validation && cti_mac_dial_digit.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_dial_digit' when calling CTIApi.post_cti_mac_dial_digit"
      end
      # resource path
      local_var_path = '/cti/{mac}/dial_digit'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_dial_digit) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_dial_digit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hangup
    # This method allows device to end the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_hangup [PostCtiMacHangup] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_hangup(mac, cti_mac_hangup, opts = {})
      post_cti_mac_hangup_with_http_info(mac, cti_mac_hangup, opts)
      nil
    end

    # Hangup
    # This method allows device to end the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_hangup [PostCtiMacHangup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_hangup_with_http_info(mac, cti_mac_hangup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_hangup ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_hangup"
      end
      # verify the required parameter 'cti_mac_hangup' is set
      if @api_client.config.client_side_validation && cti_mac_hangup.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_hangup' when calling CTIApi.post_cti_mac_hangup"
      end
      # resource path
      local_var_path = '/cti/{mac}/hangup'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_hangup) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_hangup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hold
    # This method allows device to hold the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_hold [PostCtiMacHold] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_hold(mac, cti_mac_hold, opts = {})
      post_cti_mac_hold_with_http_info(mac, cti_mac_hold, opts)
      nil
    end

    # Hold
    # This method allows device to hold the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_hold [PostCtiMacHold] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_hold_with_http_info(mac, cti_mac_hold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_hold ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_hold"
      end
      # verify the required parameter 'cti_mac_hold' is set
      if @api_client.config.client_side_validation && cti_mac_hold.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_hold' when calling CTIApi.post_cti_mac_hold"
      end
      # resource path
      local_var_path = '/cti/{mac}/hold'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_hold) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_hold\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume
    # This method allows device to resume the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_resume [PostCtiMacResume] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_resume(mac, cti_mac_resume, opts = {})
      post_cti_mac_resume_with_http_info(mac, cti_mac_resume, opts)
      nil
    end

    # Resume
    # This method allows device to resume the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_resume [PostCtiMacResume] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_resume_with_http_info(mac, cti_mac_resume, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_resume ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_resume"
      end
      # verify the required parameter 'cti_mac_resume' is set
      if @api_client.config.client_side_validation && cti_mac_resume.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_resume' when calling CTIApi.post_cti_mac_resume"
      end
      # resource path
      local_var_path = '/cti/{mac}/resume'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_resume) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_resume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send DTMF Digits
    # This method allows to sendDTMFDigits on a current active call.
    # @param mac [Integer] 
    # @param cti_mac_send_dtmf_digits [PostCtiMacSendDtmfDigits] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_send_dtmf_digits(mac, cti_mac_send_dtmf_digits, opts = {})
      post_cti_mac_send_dtmf_digits_with_http_info(mac, cti_mac_send_dtmf_digits, opts)
      nil
    end

    # Send DTMF Digits
    # This method allows to sendDTMFDigits on a current active call.
    # @param mac [Integer] 
    # @param cti_mac_send_dtmf_digits [PostCtiMacSendDtmfDigits] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_send_dtmf_digits_with_http_info(mac, cti_mac_send_dtmf_digits, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_send_dtmf_digits ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_send_dtmf_digits"
      end
      # verify the required parameter 'cti_mac_send_dtmf_digits' is set
      if @api_client.config.client_side_validation && cti_mac_send_dtmf_digits.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_send_dtmf_digits' when calling CTIApi.post_cti_mac_send_dtmf_digits"
      end
      # resource path
      local_var_path = '/cti/{mac}/send_dtmf_digits'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_send_dtmf_digits) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_send_dtmf_digits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start conference
    # This method allows to initiate conference on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_start_conference [PostCtiMacStartConference] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_start_conference(mac, cti_mac_start_conference, opts = {})
      post_cti_mac_start_conference_with_http_info(mac, cti_mac_start_conference, opts)
      nil
    end

    # Start conference
    # This method allows to initiate conference on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_start_conference [PostCtiMacStartConference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_start_conference_with_http_info(mac, cti_mac_start_conference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_start_conference ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_start_conference"
      end
      # verify the required parameter 'cti_mac_start_conference' is set
      if @api_client.config.client_side_validation && cti_mac_start_conference.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_start_conference' when calling CTIApi.post_cti_mac_start_conference"
      end
      # resource path
      local_var_path = '/cti/{mac}/start_conference'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_start_conference) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_start_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start transfer
    # This method allows to initiate the tranfser on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_start_transfer [PostCtiMacStartTransfer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_cti_mac_start_transfer(mac, cti_mac_start_transfer, opts = {})
      post_cti_mac_start_transfer_with_http_info(mac, cti_mac_start_transfer, opts)
      nil
    end

    # Start transfer
    # This method allows to initiate the tranfser on the call specified by the call_id.
    # @param mac [Integer] 
    # @param cti_mac_start_transfer [PostCtiMacStartTransfer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_cti_mac_start_transfer_with_http_info(mac, cti_mac_start_transfer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.post_cti_mac_start_transfer ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.post_cti_mac_start_transfer"
      end
      # verify the required parameter 'cti_mac_start_transfer' is set
      if @api_client.config.client_side_validation && cti_mac_start_transfer.nil?
        fail ArgumentError, "Missing the required parameter 'cti_mac_start_transfer' when calling CTIApi.post_cti_mac_start_transfer"
      end
      # resource path
      local_var_path = '/cti/{mac}/start_transfer'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti_mac_start_transfer) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#post_cti_mac_start_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set config params
    # Set config params
    # @param mac [Integer] 
    # @param cti [PutCti] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_cti_mac(mac, cti, opts = {})
      put_cti_mac_with_http_info(mac, cti, opts)
      nil
    end

    # Set config params
    # Set config params
    # @param mac [Integer] 
    # @param cti [PutCti] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_cti_mac_with_http_info(mac, cti, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CTIApi.put_cti_mac ...'
      end
      # verify the required parameter 'mac' is set
      if @api_client.config.client_side_validation && mac.nil?
        fail ArgumentError, "Missing the required parameter 'mac' when calling CTIApi.put_cti_mac"
      end
      # verify the required parameter 'cti' is set
      if @api_client.config.client_side_validation && cti.nil?
        fail ArgumentError, "Missing the required parameter 'cti' when calling CTIApi.put_cti_mac"
      end
      # resource path
      local_var_path = '/cti/{mac}'.sub('{' + 'mac' + '}', CGI.escape(mac.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cti) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CTIApi#put_cti_mac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
