=begin
#Placetel API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module PlacetelAPI
  class ContactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes a contact
    # Deletes a contact by its ID
    # @param id [Integer] Contact ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_contacts_id(id, opts = {})
      delete_contacts_id_with_http_info(id, opts)
      nil
    end

    # Deletes a contact
    # Deletes a contact by its ID
    # @param id [Integer] Contact ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_contacts_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.delete_contacts_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.delete_contacts_id"
      end
      # resource path
      local_var_path = '/contacts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#delete_contacts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all contacts
    # Provides a list of all contacts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_speeddial 
    # @option opts [String] :filter_first_name 
    # @option opts [String] :filter_last_name 
    # @option opts [String] :filter_company 
    # @option opts [String] :filter_email 
    # @option opts [String] :filter_email_work 
    # @option opts [String] :filter_phone_work 
    # @option opts [String] :filter_mobile_work 
    # @option opts [String] :filter_phone 
    # @option opts [String] :filter_mobile 
    # @option opts [Object] :filter_blocked 
    # @option opts [String] :search_number 
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 25)
    # @return [Array<Contact>]
    def get_contacts(opts = {})
      data, _status_code, _headers = get_contacts_with_http_info(opts)
      data
    end

    # Get all contacts
    # Provides a list of all contacts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_speeddial 
    # @option opts [String] :filter_first_name 
    # @option opts [String] :filter_last_name 
    # @option opts [String] :filter_company 
    # @option opts [String] :filter_email 
    # @option opts [String] :filter_email_work 
    # @option opts [String] :filter_phone_work 
    # @option opts [String] :filter_mobile_work 
    # @option opts [String] :filter_phone 
    # @option opts [String] :filter_mobile 
    # @option opts [Object] :filter_blocked 
    # @option opts [String] :search_number 
    # @option opts [Integer] :page Page of results to fetch.
    # @option opts [Integer] :per_page Number of results to return per page.
    # @return [Array<(Array<Contact>, Integer, Hash)>] Array<Contact> data, response status code and response headers
    def get_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_contacts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ContactsApi.get_contacts, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ContactsApi.get_contacts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/contacts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter[speeddial]'] = opts[:'filter_speeddial'] if !opts[:'filter_speeddial'].nil?
      query_params[:'filter[first_name]'] = opts[:'filter_first_name'] if !opts[:'filter_first_name'].nil?
      query_params[:'filter[last_name]'] = opts[:'filter_last_name'] if !opts[:'filter_last_name'].nil?
      query_params[:'filter[company]'] = opts[:'filter_company'] if !opts[:'filter_company'].nil?
      query_params[:'filter[email]'] = opts[:'filter_email'] if !opts[:'filter_email'].nil?
      query_params[:'filter[email_work]'] = opts[:'filter_email_work'] if !opts[:'filter_email_work'].nil?
      query_params[:'filter[phone_work]'] = opts[:'filter_phone_work'] if !opts[:'filter_phone_work'].nil?
      query_params[:'filter[mobile_work]'] = opts[:'filter_mobile_work'] if !opts[:'filter_mobile_work'].nil?
      query_params[:'filter[phone]'] = opts[:'filter_phone'] if !opts[:'filter_phone'].nil?
      query_params[:'filter[mobile]'] = opts[:'filter_mobile'] if !opts[:'filter_mobile'].nil?
      query_params[:'filter[blocked]'] = opts[:'filter_blocked'] if !opts[:'filter_blocked'].nil?
      query_params[:'search[number]'] = opts[:'search_number'] if !opts[:'search_number'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Contact>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a contact
    # Fetches a contact by its ID
    # @param id [Integer] ID of a contact
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def get_contacts_id(id, opts = {})
      data, _status_code, _headers = get_contacts_id_with_http_info(id, opts)
      data
    end

    # Retrieve a contact
    # Fetches a contact by its ID
    # @param id [Integer] ID of a contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Integer, Hash)>] Contact data, response status code and response headers
    def get_contacts_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_contacts_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.get_contacts_id"
      end
      # resource path
      local_var_path = '/contacts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Contact' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_contacts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a contact
    # Creates a contact
    # @param contacts [PostContacts] 
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def post_contacts(contacts, opts = {})
      data, _status_code, _headers = post_contacts_with_http_info(contacts, opts)
      data
    end

    # Create a contact
    # Creates a contact
    # @param contacts [PostContacts] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Integer, Hash)>] Contact data, response status code and response headers
    def post_contacts_with_http_info(contacts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.post_contacts ...'
      end
      # verify the required parameter 'contacts' is set
      if @api_client.config.client_side_validation && contacts.nil?
        fail ArgumentError, "Missing the required parameter 'contacts' when calling ContactsApi.post_contacts"
      end
      # resource path
      local_var_path = '/contacts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(contacts) 

      # return_type
      return_type = opts[:return_type] || 'Contact' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#post_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a contact
    # Updates a contact for a given ID
    # @param id [Integer] Contact ID
    # @param contacts [PutContacts] 
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def put_contacts_id(id, contacts, opts = {})
      data, _status_code, _headers = put_contacts_id_with_http_info(id, contacts, opts)
      data
    end

    # Update a contact
    # Updates a contact for a given ID
    # @param id [Integer] Contact ID
    # @param contacts [PutContacts] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Integer, Hash)>] Contact data, response status code and response headers
    def put_contacts_id_with_http_info(id, contacts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.put_contacts_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.put_contacts_id"
      end
      # verify the required parameter 'contacts' is set
      if @api_client.config.client_side_validation && contacts.nil?
        fail ArgumentError, "Missing the required parameter 'contacts' when calling ContactsApi.put_contacts_id"
      end
      # resource path
      local_var_path = '/contacts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(contacts) 

      # return_type
      return_type = opts[:return_type] || 'Contact' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#put_contacts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
