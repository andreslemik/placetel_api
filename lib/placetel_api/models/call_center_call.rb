=begin
#Placetel API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'date'

module PlacetelAPI
  # Provides a list of all call center calls
  class CallCenterCall
    attr_accessor :call_type

    attr_accessor :call_status

    attr_accessor :answer_status

    attr_accessor :started_at

    attr_accessor :left_queue_at

    attr_accessor :ended_at

    attr_accessor :last_updated_at

    attr_accessor :iteration

    attr_accessor :from

    attr_accessor :to

    attr_accessor :queue_name

    attr_accessor :agent_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'call_type' => :'call_type',
        :'call_status' => :'call_status',
        :'answer_status' => :'answer_status',
        :'started_at' => :'started_at',
        :'left_queue_at' => :'left_queue_at',
        :'ended_at' => :'ended_at',
        :'last_updated_at' => :'last_updated_at',
        :'iteration' => :'iteration',
        :'from' => :'from',
        :'to' => :'to',
        :'queue_name' => :'queue_name',
        :'agent_name' => :'agent_name'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'call_type' => :'String',
        :'call_status' => :'String',
        :'answer_status' => :'String',
        :'started_at' => :'DateTime',
        :'left_queue_at' => :'DateTime',
        :'ended_at' => :'DateTime',
        :'last_updated_at' => :'DateTime',
        :'iteration' => :'String',
        :'from' => :'String',
        :'to' => :'String',
        :'queue_name' => :'String',
        :'agent_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PlacetelAPI::CallCenterCall` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PlacetelAPI::CallCenterCall`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'call_type')
        self.call_type = attributes[:'call_type']
      end

      if attributes.key?(:'call_status')
        self.call_status = attributes[:'call_status']
      end

      if attributes.key?(:'answer_status')
        self.answer_status = attributes[:'answer_status']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'left_queue_at')
        self.left_queue_at = attributes[:'left_queue_at']
      end

      if attributes.key?(:'ended_at')
        self.ended_at = attributes[:'ended_at']
      end

      if attributes.key?(:'last_updated_at')
        self.last_updated_at = attributes[:'last_updated_at']
      end

      if attributes.key?(:'iteration')
        self.iteration = attributes[:'iteration']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'queue_name')
        self.queue_name = attributes[:'queue_name']
      end

      if attributes.key?(:'agent_name')
        self.agent_name = attributes[:'agent_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      call_type_validator = EnumAttributeValidator.new('String', ["dail_in", "dail_out"])
      return false unless call_type_validator.valid?(@call_type)
      call_status_validator = EnumAttributeValidator.new('String', ["unassigned", "assigned", "ended", "not_answered", "cancelled", "dail_out"])
      return false unless call_status_validator.valid?(@call_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_type Object to be assigned
    def call_type=(call_type)
      validator = EnumAttributeValidator.new('String', ["dail_in", "dail_out"])
      unless validator.valid?(call_type)
        fail ArgumentError, "invalid value for \"call_type\", must be one of #{validator.allowable_values}."
      end
      @call_type = call_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_status Object to be assigned
    def call_status=(call_status)
      validator = EnumAttributeValidator.new('String', ["unassigned", "assigned", "ended", "not_answered", "cancelled", "dail_out"])
      unless validator.valid?(call_status)
        fail ArgumentError, "invalid value for \"call_status\", must be one of #{validator.allowable_values}."
      end
      @call_status = call_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          call_type == o.call_type &&
          call_status == o.call_status &&
          answer_status == o.answer_status &&
          started_at == o.started_at &&
          left_queue_at == o.left_queue_at &&
          ended_at == o.ended_at &&
          last_updated_at == o.last_updated_at &&
          iteration == o.iteration &&
          from == o.from &&
          to == o.to &&
          queue_name == o.queue_name &&
          agent_name == o.agent_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [call_type, call_status, answer_status, started_at, left_queue_at, ended_at, last_updated_at, iteration, from, to, queue_name, agent_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        PlacetelAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
