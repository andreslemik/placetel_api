=begin
#Placetel API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'date'

module PlacetelAPI
  # Fetch a list of all users of the account
  class User
    attr_accessor :id

    attr_accessor :login

    attr_accessor :email

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :type

    # Internal DID
    attr_accessor :did

    # Outgoing caller ID
    attr_accessor :callerid

    attr_accessor :primary_sip_user_id

    # Language (ISO-639-1 Code)
    attr_accessor :locale

    # Obfuscate billing records for this user
    attr_accessor :obfuscate_billing_records

    # Obfuscate numbers not in rights_numbers for this user
    attr_accessor :obfuscate_others

    attr_accessor :admin_user

    attr_accessor :rights_numbers

    attr_accessor :updated_at

    attr_accessor :created_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'login' => :'login',
        :'email' => :'email',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'type' => :'type',
        :'did' => :'did',
        :'callerid' => :'callerid',
        :'primary_sip_user_id' => :'primary_sip_user_id',
        :'locale' => :'locale',
        :'obfuscate_billing_records' => :'obfuscate_billing_records',
        :'obfuscate_others' => :'obfuscate_others',
        :'admin_user' => :'admin_user',
        :'rights_numbers' => :'rights_numbers',
        :'updated_at' => :'updated_at',
        :'created_at' => :'created_at'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'login' => :'String',
        :'email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'type' => :'String',
        :'did' => :'Integer',
        :'callerid' => :'String',
        :'primary_sip_user_id' => :'Integer',
        :'locale' => :'String',
        :'obfuscate_billing_records' => :'Boolean',
        :'obfuscate_others' => :'Boolean',
        :'admin_user' => :'Boolean',
        :'rights_numbers' => :'Array<String>',
        :'updated_at' => :'DateTime',
        :'created_at' => :'DateTime'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PlacetelAPI::User` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PlacetelAPI::User`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'login')
        self.login = attributes[:'login']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'did')
        self.did = attributes[:'did']
      end

      if attributes.key?(:'callerid')
        self.callerid = attributes[:'callerid']
      end

      if attributes.key?(:'primary_sip_user_id')
        self.primary_sip_user_id = attributes[:'primary_sip_user_id']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'obfuscate_billing_records')
        self.obfuscate_billing_records = attributes[:'obfuscate_billing_records']
      end

      if attributes.key?(:'obfuscate_others')
        self.obfuscate_others = attributes[:'obfuscate_others']
      end

      if attributes.key?(:'admin_user')
        self.admin_user = attributes[:'admin_user']
      end

      if attributes.key?(:'rights_numbers')
        if (value = attributes[:'rights_numbers']).is_a?(Array)
          self.rights_numbers = value
        end
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      locale_validator = EnumAttributeValidator.new('String', ["de", "en"])
      return false unless locale_validator.valid?(@locale)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locale Object to be assigned
    def locale=(locale)
      validator = EnumAttributeValidator.new('String', ["de", "en"])
      unless validator.valid?(locale)
        fail ArgumentError, "invalid value for \"locale\", must be one of #{validator.allowable_values}."
      end
      @locale = locale
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          login == o.login &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          type == o.type &&
          did == o.did &&
          callerid == o.callerid &&
          primary_sip_user_id == o.primary_sip_user_id &&
          locale == o.locale &&
          obfuscate_billing_records == o.obfuscate_billing_records &&
          obfuscate_others == o.obfuscate_others &&
          admin_user == o.admin_user &&
          rights_numbers == o.rights_numbers &&
          updated_at == o.updated_at &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, login, email, first_name, last_name, type, did, callerid, primary_sip_user_id, locale, obfuscate_billing_records, obfuscate_others, admin_user, rights_numbers, updated_at, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        PlacetelAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
